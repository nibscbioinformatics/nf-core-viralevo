/*
========================================================================================
    Config file for defining DSL2 per module options
========================================================================================
    Available keys to override module options:
        args            = Additional arguments appended to command in module.
        args2           = Second set of arguments appended to command in module (multi-tool modules).
        args3           = Third set of arguments appended to command in module (multi-tool modules).
        publish_dir     = Directory to publish results.
        publish_by_meta = Groovy list of keys available in meta map to append as directories to "publish_dir" path
                            If publish_by_meta = true                 - Value of ${meta['id']} is appended as a directory to "publish_dir" path
                            If publish_by_meta = ['id', 'custompath'] - If "id" is in meta map and "custompath" isn't then "${meta['id']}/custompath/"
                                                                        is appended as a directory to "publish_dir" path
                            If publish_by_meta = false / null         - No directories are appended to "publish_dir" path
        publish_files   = Groovy map where key = "file_ext" and value = "directory" to publish results for that file extension
                            The value of "directory" is appended to the standard "publish_dir" path as defined above.
                            If publish_files = null (unspecified)     - All files are published.
                            If publish_files = false                  - No files are published.
        suffix          = File name suffix for output files.
----------------------------------------------------------------------------------------
*/

params {
    modules {
        'fastqc_raw' {
            args = "--quiet"
            publish_files   = ['zip':'zips', 'html':''] // write the zip to subdir
            publish_dir = "QC/fastqc_raw"
        }
        'cutadapt' {
            args = "-q 30 --times 40 --minimum-length 50 --error-rate 0.1 --max-n 0"
            publish_files   = ['log':'']
            publish_dir = "Stats/trimming"
        }
        'fastqc_trimmed' {
            args = "--quiet"
            publish_files   = ['zip':'zips', 'html': '']
            publish_dir = "QC/fastqc_trimmed"
        }
        'trimlog' {
            publish_dir = "Stats/trimming"
        }
        'bwamem2_index' {
            publish_files   = [:]
        }
        'samtools_faidx' {
            publish_files   = [:]
        }
        'bwamem2_mem' {
            args            = '' // I have added read group  directly to the module code.. find more reproducible solution
            publish_dir = 'alignment/bwa'
        }
        'samtools_sort' {
            args            =  ''
            suffix          = '.sorted'
            publish_files   = [:]
        }
        'samtools_index' {
            publish_files   = [:]
        }
        'samtools_flagstat' {
            publish_dir = "Stats/alignment"
           // publish_files   = [:]
        }
        'alignmentlog' {
            publish_dir = "Stats/alignment"
        }
        'do_depth' {
            publish_dir = "Stats/alignment"
        }
        'samtools_stats' {
            args            = ''
            suffix          = '.sorted'
            publish_files   = ['stats':'samtools_stats', 'flagstat':'samtools_stats', 'idxstats':'samtools_stats']
            publish_dir     = "alignment/bwa"
        }
        'picard_markduplicates' {
            args            = 'ASSUME_SORTED=true REMOVE_DUPLICATES=false VALIDATION_STRINGENCY=LENIENT TMP_DIR=tmp'
            suffix          = '.markdup.sorted'
            publish_files   = ['bam': '', 'metrics.txt':'picard_metrics']
            publish_dir     = "alignment/picard"
        }
        'picard_markduplicates_samtools' {
            args            = ''
            suffix          = '.markdup.sorted'
            publish_files   = ['bai':'', 'stats':'samtools_stats', 'flagstat':'samtools_stats', 'idxstats':'samtools_stats']
            publish_dir     = "alignment/picard"
        }
        'lofreq_indelqual' {
            args            = ''
            publish_dir     = "variants/lofreq/indelqual"
        }
        'samtools_index_indelqual' {
            publish_files   = [:]
        }
        'lofreq_callparallel' {
            args            = ''
            suffix          ='_lofreq'
            publish_dir     = "variants/lofreq/call_parallel"
        }
        'ivar_trim' {
            args            = '-m 30 -q 20'
            suffix          = '.ivar_trim'
            publish_files   = ['log':'log']
            publish_dir     = "variants/ivar/trim"
        }
        'ivar_trim_sort_bam' {
            suffix          = '.ivar_trim.sorted'
            publish_files   = ['stats':'samtools_stats', 'flagstat':'samtools_stats', 'idxstats':'samtools_stats']
            publish_dir     = "variants/ivar/trim/samtools_stats"
        }
        'ivar_variants' {
            args            = '-t 0.001 -m 10'
            suffix          = '_variants'
            args2           = '-aa -A -d 0 -B -Q 0'
            publish_dir     = 'variants/ivar/tsv'
        }
        'tsv2vcf' {
            publish_dir     = 'variants/ivar/tsv2vcf'
        }
        'snpeff_build' {
            publish_dir     = 'genome/db'
        }
        'snpeff_ann' {
            args            = '-ud 1'
            publish_files   = ['vcf':'vcf']
            publish_dir     = 'variants/snpeff'
        }
        // annotate using snpEff available on module repo
        'snpeff' {
            args             = '-nodownload -canon -v' //dont download the db, use only cannonical transcripts and verbose output
            publish_files    = false
            tag_base         = '5.0'
        }
        'makevartable' {
            publish_files   = ['_filtered.vcf':'filtered_vcf', 'csv':'']
            publish_dir     = 'variants/vartable'
        }
        'cut_vcf' {
            args            = '-f 1-8'
            publish_files   = ['.vcf':'cutup_vcf']
            publish_dir     = 'variants/consensus'
        }
        'bcftools_norm' {
            args            = '--rm-dup all'
            publish_files   = ['_nodups.vcf':'bcftools_norm']
            publish_dir     = 'variants/consensus'
        }
        'bcftools_view' {
            args            = '--output-type z'
            publish_files   = ['.vcf.gz':'bcftools_view']
            publish_dir     = 'variants/consensus'
        }
        'bcftools_index' {
            publish_dir     = 'variants/consensus/bcftools_view'
        }
        'bcftools_consensus' {
            publish_files   = ['.fa':'bcftools_consensus']
            publish_dir     = 'variants/consensus'
        }
        'multiqc' {
            args = ""
        }
    }
}
